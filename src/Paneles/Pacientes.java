/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Paneles;

import java.awt.Color;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author marco
 */
public class Pacientes extends javax.swing.JPanel {

    /**
     * Creates new form Pacientess
     */
    public Pacientes() {
        initComponents();
        try {
            Conexion con = new Conexion();

            DefaultTableModel model = (DefaultTableModel) tablaGeneral.getModel();
            model.setRowCount(0);

            String query = "SELECT * FROM Pacientes";
            PreparedStatement preparedStatement = con.prepareStatement(query);
            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                int id_paciente = rs.getInt("id_paciente");
                String DPI = rs.getString("DPI");
                String nombres = rs.getString("nombres");
                String apellidos = rs.getString("apellidos");
                int edad = rs.getInt("edad");
                String sexo = rs.getString("sexo");
                String direccion = rs.getString("direccion");
                String telefono = rs.getString("telefono");
                String email = rs.getString("email");
                Date fecha_registro = rs.getDate("fecha_registro");

                model.addRow(new Object[]{id_paciente, DPI, nombres, apellidos, edad, sexo, direccion, telefono, email, fecha_registro});
            }
        } catch (Exception e) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bg = new javax.swing.JPanel();
        tituloAgregarPaciente = new javax.swing.JLabel();
        dpi = new javax.swing.JLabel();
        nombres = new javax.swing.JLabel();
        apellidos = new javax.swing.JLabel();
        edad = new javax.swing.JLabel();
        sexo = new javax.swing.JLabel();
        dirección = new javax.swing.JLabel();
        email = new javax.swing.JLabel();
        telefono = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaGeneral = new javax.swing.JTable();
        fondoBtnAgregar = new javax.swing.JPanel();
        btnAgregar = new javax.swing.JLabel();
        fondoBtnBuscar = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JLabel();
        fondoBtnLimpiar = new javax.swing.JPanel();
        btnLimpiar = new javax.swing.JLabel();
        boxDPI = new javax.swing.JTextField();
        boxNombres = new javax.swing.JTextField();
        boxApellidos = new javax.swing.JTextField();
        boxEdad = new javax.swing.JTextField();
        comboBoxSexo = new javax.swing.JComboBox<>();
        boxDireccion = new javax.swing.JTextField();
        boxTelefono = new javax.swing.JTextField();
        boxEmail = new javax.swing.JTextField();
        fondoBtnModificar = new javax.swing.JPanel();
        btnModificar = new javax.swing.JLabel();
        fondoBtnBorrar = new javax.swing.JPanel();
        btnBorrar = new javax.swing.JLabel();

        bg.setBackground(new java.awt.Color(255, 255, 255));

        tituloAgregarPaciente.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        tituloAgregarPaciente.setForeground(new java.awt.Color(38, 41, 43));
        tituloAgregarPaciente.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tituloAgregarPaciente.setText("AGREGAR PACIENTE");

        dpi.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        dpi.setForeground(new java.awt.Color(38, 41, 43));
        dpi.setText("DPI: ");

        nombres.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        nombres.setForeground(new java.awt.Color(38, 41, 43));
        nombres.setText("Nombres: ");

        apellidos.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        apellidos.setForeground(new java.awt.Color(38, 41, 43));
        apellidos.setText("Apellidos: ");

        edad.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        edad.setForeground(new java.awt.Color(38, 41, 43));
        edad.setText("Edad:");

        sexo.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        sexo.setForeground(new java.awt.Color(38, 41, 43));
        sexo.setText("Sexo:");

        dirección.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        dirección.setForeground(new java.awt.Color(38, 41, 43));
        dirección.setText("Dirección:");

        email.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        email.setForeground(new java.awt.Color(38, 41, 43));
        email.setText("Email:");

        telefono.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        telefono.setForeground(new java.awt.Color(38, 41, 43));
        telefono.setText("Teléfono:");

        tablaGeneral.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        tablaGeneral.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id_Paciente", "DPI", "Nombres", "Apellidos", "Edad", "Sexo", "Dirección", "Teléfono", "Email", "Fecha_Registro"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaGeneral.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tablaGeneral.getTableHeader().setReorderingAllowed(false);
        tablaGeneral.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaGeneralMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaGeneral);
        if (tablaGeneral.getColumnModel().getColumnCount() > 0) {
            tablaGeneral.getColumnModel().getColumn(0).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(1).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(2).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(3).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(4).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(5).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(6).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(7).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(8).setResizable(false);
            tablaGeneral.getColumnModel().getColumn(9).setResizable(false);
        }

        fondoBtnAgregar.setBackground(new java.awt.Color(95, 122, 219));

        btnAgregar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnAgregar.setForeground(new java.awt.Color(255, 255, 255));
        btnAgregar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnAgregar.setText("AGREGAR");
        btnAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnAgregarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAgregarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAgregarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout fondoBtnAgregarLayout = new javax.swing.GroupLayout(fondoBtnAgregar);
        fondoBtnAgregar.setLayout(fondoBtnAgregarLayout);
        fondoBtnAgregarLayout.setHorizontalGroup(
            fondoBtnAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fondoBtnAgregarLayout.createSequentialGroup()
                .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
        fondoBtnAgregarLayout.setVerticalGroup(
            fondoBtnAgregarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnAgregar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        fondoBtnBuscar.setBackground(new java.awt.Color(95, 122, 219));

        btnBuscar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnBuscar.setForeground(new java.awt.Color(255, 255, 255));
        btnBuscar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnBuscar.setText("BUSCAR");
        btnBuscar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBuscar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBuscarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBuscarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBuscarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout fondoBtnBuscarLayout = new javax.swing.GroupLayout(fondoBtnBuscar);
        fondoBtnBuscar.setLayout(fondoBtnBuscarLayout);
        fondoBtnBuscarLayout.setHorizontalGroup(
            fondoBtnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoBtnBuscarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        fondoBtnBuscarLayout.setVerticalGroup(
            fondoBtnBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnBuscar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        fondoBtnLimpiar.setBackground(new java.awt.Color(95, 122, 219));

        btnLimpiar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnLimpiar.setForeground(new java.awt.Color(255, 255, 255));
        btnLimpiar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnLimpiar.setText("LIMPIAR");
        btnLimpiar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLimpiar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnLimpiarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLimpiarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLimpiarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout fondoBtnLimpiarLayout = new javax.swing.GroupLayout(fondoBtnLimpiar);
        fondoBtnLimpiar.setLayout(fondoBtnLimpiarLayout);
        fondoBtnLimpiarLayout.setHorizontalGroup(
            fondoBtnLimpiarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );
        fondoBtnLimpiarLayout.setVerticalGroup(
            fondoBtnLimpiarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoBtnLimpiarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        comboBoxSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Femenino", "Masculino", "S/E" }));

        fondoBtnModificar.setBackground(new java.awt.Color(95, 122, 219));

        btnModificar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnModificar.setForeground(new java.awt.Color(255, 255, 255));
        btnModificar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnModificar.setText("MODIFICAR");
        btnModificar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnModificar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnModificarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnModificarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnModificarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout fondoBtnModificarLayout = new javax.swing.GroupLayout(fondoBtnModificar);
        fondoBtnModificar.setLayout(fondoBtnModificarLayout);
        fondoBtnModificarLayout.setHorizontalGroup(
            fondoBtnModificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnModificar, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
        );
        fondoBtnModificarLayout.setVerticalGroup(
            fondoBtnModificarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoBtnModificarLayout.createSequentialGroup()
                .addComponent(btnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        fondoBtnBorrar.setBackground(new java.awt.Color(95, 122, 219));

        btnBorrar.setFont(new java.awt.Font("Roboto Black", 0, 12)); // NOI18N
        btnBorrar.setForeground(new java.awt.Color(255, 255, 255));
        btnBorrar.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnBorrar.setText("BORRAR");
        btnBorrar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnBorrar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnBorrarMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnBorrarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnBorrarMouseExited(evt);
            }
        });

        javax.swing.GroupLayout fondoBtnBorrarLayout = new javax.swing.GroupLayout(fondoBtnBorrar);
        fondoBtnBorrar.setLayout(fondoBtnBorrarLayout);
        fondoBtnBorrarLayout.setHorizontalGroup(
            fondoBtnBorrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoBtnBorrarLayout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(btnBorrar, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                .addContainerGap())
        );
        fondoBtnBorrarLayout.setVerticalGroup(
            fondoBtnBorrarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fondoBtnBorrarLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout bgLayout = new javax.swing.GroupLayout(bg);
        bg.setLayout(bgLayout);
        bgLayout.setHorizontalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(bgLayout.createSequentialGroup()
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(279, 279, 279)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(bgLayout.createSequentialGroup()
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(dpi, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nombres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(apellidos, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(edad, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(sexo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dirección, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(telefono, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(email, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(boxDireccion, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boxEdad, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boxApellidos, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(boxNombres, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                                        .addComponent(boxDPI, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(boxEmail, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(comboBoxSexo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(boxTelefono, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(tituloAgregarPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(fondoBtnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(219, 219, 219)
                        .addComponent(fondoBtnBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(56, 56, 56)
                        .addComponent(fondoBtnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(fondoBtnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bgLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(fondoBtnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(498, 498, 498)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        bgLayout.setVerticalGroup(
            bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tituloAgregarPaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                .addGap(33, 33, 33)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(boxDPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dpi, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombres, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxNombres))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxApellidos, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(apellidos))
                .addGap(12, 12, 12)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(edad, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxEdad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sexo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboBoxSexo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dirección, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxDireccion))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telefono, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxTelefono))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(email, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(boxEmail))
                .addGap(29, 29, 29)
                .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fondoBtnBuscar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fondoBtnModificar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(bgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(fondoBtnAgregar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(fondoBtnLimpiar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(fondoBtnBorrar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(bg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseEntered
        fondoBtnAgregar.setBackground(new Color(46, 50, 57));
    }//GEN-LAST:event_btnAgregarMouseEntered

    private void btnAgregarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseExited
        fondoBtnAgregar.setBackground(new Color(95, 122, 219));
    }//GEN-LAST:event_btnAgregarMouseExited

    private void btnBuscarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMouseEntered
        fondoBtnBuscar.setBackground(new Color(46, 50, 57));
    }//GEN-LAST:event_btnBuscarMouseEntered

    private void btnBuscarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMouseExited
        fondoBtnBuscar.setBackground(new Color(95, 122, 219));
    }//GEN-LAST:event_btnBuscarMouseExited

    private void btnLimpiarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMouseEntered
        fondoBtnLimpiar.setBackground(new Color(46, 50, 57));
    }//GEN-LAST:event_btnLimpiarMouseEntered

    private void btnLimpiarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMouseExited
        fondoBtnLimpiar.setBackground(new Color(95, 122, 219));
    }//GEN-LAST:event_btnLimpiarMouseExited

    private void btnAgregarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarMouseClicked
        try {
            Conexion con = new Conexion();
            String DPI = boxDPI.getText();
            String nombres = boxNombres.getText();
            String apellidos = boxApellidos.getText();
            int edad = Integer.parseInt(boxEdad.getText());
            String direccion = boxDireccion.getText();
            String telefono = boxTelefono.getText();
            String email = boxEmail.getText();
            String sexo = comboBoxSexo.getSelectedItem().toString();

            String query = "INSERT INTO Pacientes (DPI, nombres, apellidos, edad, sexo, direccion, telefono, email, fecha_registro) VALUES (?, ?, ?, ?, ?, ?, ?, ?, CURRENT_DATE())";

            PreparedStatement preparedStatement = con.prepareStatement(query);
            preparedStatement.setString(1, DPI);
            preparedStatement.setString(2, nombres);
            preparedStatement.setString(3, apellidos);
            preparedStatement.setInt(4, edad);
            preparedStatement.setString(5, sexo);
            preparedStatement.setString(6, direccion);
            preparedStatement.setString(7, telefono);
            preparedStatement.setString(8, email);

            preparedStatement.executeUpdate();

            // Mostrar ventana emergente
            JOptionPane.showMessageDialog(this, "Paciente agregado correctamente.");

            // Volver a cargar los datos en tablaGeneral
            DefaultTableModel model = (DefaultTableModel) tablaGeneral.getModel();
            model.setRowCount(0);

            query = "SELECT * FROM Pacientes";
            preparedStatement = con.prepareStatement(query);
            ResultSet rs = preparedStatement.executeQuery();

            while (rs.next()) {
                int id_paciente = rs.getInt("id_paciente");
                String DPI2 = rs.getString("DPI");
                String nombres2 = rs.getString("nombres");
                String apellidos2 = rs.getString("apellidos");
                int edad2 = rs.getInt("edad");
                String sexo2 = rs.getString("sexo");
                String direccion2 = rs.getString("direccion");
                String telefono2 = rs.getString("telefono");
                String email2 = rs.getString("email");
                Date fecha_registro = rs.getDate("fecha_registro");

                model.addRow(new Object[]{id_paciente, DPI2, nombres2, apellidos2, edad2, sexo2, direccion2, telefono2, email2, fecha_registro});
            }

            boxDPI.setText("");
            boxNombres.setText("");
            boxApellidos.setText("");
            boxEdad.setText("");
            boxDireccion.setText("");
            boxTelefono.setText("");
            boxEmail.setText("");
        } catch (ClassNotFoundException | NumberFormatException | SQLException e) {

        }
    }//GEN-LAST:event_btnAgregarMouseClicked

    private void btnLimpiarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLimpiarMouseClicked
            boxDPI.setText("");
            boxNombres.setText("");
            boxApellidos.setText("");
            boxEdad.setText("");
            boxDireccion.setText("");
            boxTelefono.setText("");
            boxEmail.setText("");
    }//GEN-LAST:event_btnLimpiarMouseClicked

    private void btnBuscarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBuscarMouseClicked
        String input = JOptionPane.showInputDialog(this, "Ingrese DPI:");
        if (input != null) {
            try {
                Conexion con = new Conexion();
                DefaultTableModel model = (DefaultTableModel) tablaGeneral.getModel();
                model.setRowCount(0);

                String query = "SELECT * FROM Pacientes WHERE DPI = ?";
                PreparedStatement preparedStatement = con.prepareStatement(query);
                preparedStatement.setString(1, input);
                ResultSet rs = preparedStatement.executeQuery();

                boolean found = false;
                while (rs.next()) {
                    found = true;
                    int id_paciente = rs.getInt("id_paciente");
                    String DPI = rs.getString("DPI");
                    String nombres = rs.getString("nombres");
                    String apellidos = rs.getString("apellidos");
                    int edad = rs.getInt("edad");
                    String sexo = rs.getString("sexo");
                    String direccion = rs.getString("direccion");
                    String telefono = rs.getString("telefono");
                    String email = rs.getString("email");
                    Date fecha_registro = rs.getDate("fecha_registro");

                    model.addRow(new Object[]{id_paciente, DPI, nombres, apellidos, edad, sexo, direccion, telefono, email, fecha_registro});

                    boxDPI.setText(DPI);
                    boxNombres.setText(nombres);
                    boxApellidos.setText(apellidos);
                    boxEdad.setText(String.valueOf(edad));
                    comboBoxSexo.setSelectedItem(sexo);
                    boxDireccion.setText(direccion);
                    boxTelefono.setText(telefono);
                    boxEmail.setText(email);
                }

                if (found) {
                    // Seleccionar automáticamente la primera fila del JTable
                    tablaGeneral.setRowSelectionInterval(0, 0);
                } else {
                    // Mostrar un mensaje de error si no se encontró ningún registro
                    JOptionPane.showMessageDialog(this, "DPI NO ENCONTRADO");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_btnBuscarMouseClicked

    private void btnModificarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseClicked
        int selectedRow = tablaGeneral.getSelectedRow();
        if (selectedRow != -1) {
            String DPI = tablaGeneral.getValueAt(selectedRow, 1).toString();
            String nombres = tablaGeneral.getValueAt(selectedRow, 2).toString();
            String apellidos = tablaGeneral.getValueAt(selectedRow, 3).toString();

            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de actualizar el registro de " + nombres + " " + apellidos + " con DPI " + DPI + "?", "Confirmar actualización", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Conexion con = new Conexion();
                    String DPI2 = boxDPI.getText();
                    String nombres2 = boxNombres.getText();
                    String apellidos2 = boxApellidos.getText();
                    int edad = Integer.parseInt(boxEdad.getText());
                    String direccion = boxDireccion.getText();
                    String telefono = boxTelefono.getText();
                    String email = boxEmail.getText();
                    String sexo = comboBoxSexo.getSelectedItem().toString();

                    int id_Pacientes = (int) tablaGeneral.getValueAt(selectedRow, 0);

                    String query = "UPDATE Pacientes SET DPI=?, nombres=?, apellidos=?, edad=?, sexo=?, direccion=?, telefono=?, email=?, fecha_registro=CURRENT_DATE() WHERE id_paciente=?";

                    PreparedStatement preparedStatement = con.prepareStatement(query);
                    preparedStatement.setString(1, DPI2);
                    preparedStatement.setString(2, nombres2);
                    preparedStatement.setString(3, apellidos2);
                    preparedStatement.setInt(4, edad);
                    preparedStatement.setString(5, sexo);
                    preparedStatement.setString(6, direccion);
                    preparedStatement.setString(7, telefono);
                    preparedStatement.setString(8, email);
                    preparedStatement.setInt(9, id_Pacientes);

                    preparedStatement.executeUpdate();
                    boxDPI.setText("");
                    boxNombres.setText("");
                    boxApellidos.setText("");
                    boxEdad.setText("");
                    boxDireccion.setText("");
                    boxTelefono.setText("");
                    boxEmail.setText("");

                    DefaultTableModel model = (DefaultTableModel) tablaGeneral.getModel();
                    model.setRowCount(0);

                    query = "SELECT * FROM Pacientes";
                    preparedStatement = con.prepareStatement(query);
                    ResultSet rs = preparedStatement.executeQuery();

                    while (rs.next()) {
                        int id_paciente = rs.getInt("id_paciente");
                        String DPI3 = rs.getString("DPI");
                        String nombres3 = rs.getString("nombres");
                        String apellidos3 = rs.getString("apellidos");
                        int edad2 = rs.getInt("edad");
                        String sexo2 = rs.getString("sexo");
                        String direccion2 = rs.getString("direccion");
                        String telefono2 = rs.getString("telefono");
                        String email2 = rs.getString("email");
                        Date fecha_registro = rs.getDate("fecha_registro");

                        model.addRow(new Object[]{id_paciente, DPI3, nombres3, apellidos3, edad2, sexo2, direccion2, telefono2, email2, fecha_registro});
                    }
                } catch (ClassNotFoundException | NumberFormatException | SQLException e) {

                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una fila en la tabla para actualizar.");
        }
    }//GEN-LAST:event_btnModificarMouseClicked

    private void btnModificarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseEntered
        fondoBtnModificar.setBackground(new Color(46, 50, 57));
    }//GEN-LAST:event_btnModificarMouseEntered

    private void btnModificarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnModificarMouseExited
        fondoBtnModificar.setBackground(new Color(95, 122, 219));
    }//GEN-LAST:event_btnModificarMouseExited

    private void tablaGeneralMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaGeneralMouseClicked
        int selectedRow = tablaGeneral.getSelectedRow();
        if (selectedRow != -1) {
            String DPI = tablaGeneral.getValueAt(selectedRow, 1).toString();
            String nombres = tablaGeneral.getValueAt(selectedRow, 2).toString();
            String apellidos = tablaGeneral.getValueAt(selectedRow, 3).toString();
            String edad = tablaGeneral.getValueAt(selectedRow, 4).toString();
            String sexo = tablaGeneral.getValueAt(selectedRow, 5).toString();
            String direccion = tablaGeneral.getValueAt(selectedRow, 6).toString();
            String telefono = tablaGeneral.getValueAt(selectedRow, 7).toString();
            String email = tablaGeneral.getValueAt(selectedRow, 8).toString();

            boxDPI.setText(DPI);
            boxNombres.setText(nombres);
            boxApellidos.setText(apellidos);
            boxEdad.setText(edad);
            comboBoxSexo.setSelectedItem(sexo);
            boxDireccion.setText(direccion);
            boxTelefono.setText(telefono);
            boxEmail.setText(email);
        }
    }//GEN-LAST:event_tablaGeneralMouseClicked

    private void btnBorrarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarMouseClicked
        int selectedRow = tablaGeneral.getSelectedRow();
        if (selectedRow != -1) {
            String DPI = tablaGeneral.getValueAt(selectedRow, 1).toString();
            String nombres = tablaGeneral.getValueAt(selectedRow, 2).toString();
            String apellidos = tablaGeneral.getValueAt(selectedRow, 3).toString();

            int confirm = JOptionPane.showConfirmDialog(this, "¿Está seguro de eliminar el registro de " + nombres + " " + apellidos + " con DPI " + DPI + "?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                try {
                    Conexion con = new Conexion();

                    int id_Pacientes = (int) tablaGeneral.getValueAt(selectedRow, 0);

                    String query = "DELETE FROM Pacientes WHERE id_paciente=?";

                    PreparedStatement preparedStatement = con.prepareStatement(query);
                    preparedStatement.setInt(1, id_Pacientes);

                    preparedStatement.executeUpdate();
                    boxDPI.setText("");
                    boxNombres.setText("");
                    boxApellidos.setText("");
                    boxEdad.setText("");
                    boxDireccion.setText("");
                    boxTelefono.setText("");
                    boxEmail.setText("");

                    DefaultTableModel model = (DefaultTableModel) tablaGeneral.getModel();
                    model.setRowCount(0);

                    query = "SELECT * FROM Pacientes";
                    preparedStatement = con.prepareStatement(query);
                    ResultSet rs = preparedStatement.executeQuery();

                    while (rs.next()) {
                        int id_paciente = rs.getInt("id_paciente");
                        String DPI2 = rs.getString("DPI");
                        String nombres2 = rs.getString("nombres");
                        String apellidos2 = rs.getString("apellidos");
                        int edad = rs.getInt("edad");
                        String sexo = rs.getString("sexo");
                        String direccion = rs.getString("direccion");
                        String telefono = rs.getString("telefono");
                        String email = rs.getString("email");
                        Date fecha_registro = rs.getDate("fecha_registro");

                        model.addRow(new Object[]{id_paciente, DPI2, nombres2, apellidos2, edad, sexo, direccion, telefono, email, fecha_registro});
                    }
                } catch (Exception e) {
                }
            }
        } else {
            JOptionPane.showMessageDialog(this, "Por favor seleccione una fila en la tabla para eliminar.");
        }
    }//GEN-LAST:event_btnBorrarMouseClicked

    private void btnBorrarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarMouseEntered
        fondoBtnBorrar.setBackground(new Color(46, 50, 57));
    }//GEN-LAST:event_btnBorrarMouseEntered

    private void btnBorrarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnBorrarMouseExited
        fondoBtnBorrar.setBackground(new Color(95, 122, 219));
    }//GEN-LAST:event_btnBorrarMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel apellidos;
    private javax.swing.JPanel bg;
    private javax.swing.JTextField boxApellidos;
    private javax.swing.JTextField boxDPI;
    private javax.swing.JTextField boxDireccion;
    private javax.swing.JTextField boxEdad;
    private javax.swing.JTextField boxEmail;
    private javax.swing.JTextField boxNombres;
    private javax.swing.JTextField boxTelefono;
    private javax.swing.JLabel btnAgregar;
    private javax.swing.JLabel btnBorrar;
    private javax.swing.JLabel btnBuscar;
    private javax.swing.JLabel btnLimpiar;
    private javax.swing.JLabel btnModificar;
    private javax.swing.JComboBox<String> comboBoxSexo;
    private javax.swing.JLabel dirección;
    private javax.swing.JLabel dpi;
    private javax.swing.JLabel edad;
    private javax.swing.JLabel email;
    private javax.swing.JPanel fondoBtnAgregar;
    private javax.swing.JPanel fondoBtnBorrar;
    private javax.swing.JPanel fondoBtnBuscar;
    private javax.swing.JPanel fondoBtnLimpiar;
    private javax.swing.JPanel fondoBtnModificar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nombres;
    private javax.swing.JLabel sexo;
    private javax.swing.JTable tablaGeneral;
    private javax.swing.JLabel telefono;
    private javax.swing.JLabel tituloAgregarPaciente;
    // End of variables declaration//GEN-END:variables
}